#include <SFML/Graphics.hpp>
#include<iostream>
#include<Windows.h>
using namespace std;
using namespace sf;
double tileWidth =100.0;
double tileHeight =100.0;
int offset2 = tileWidth/2;
int offset = 0;
void displayPosition(Vector2f temp)
{
	cout<<temp.x<<" "<<temp.y<<endl;
}
class Index
{
public:
	int _baris,_kolom;
	Index(int baris=0, int kolom=0)
	{
		_baris = baris;
		_kolom=kolom;
		cout<<_baris<<","<<_kolom<<endl;
	}
	void setBK(int b,int k)
	{
		_baris=b;
		_kolom=k;
	}
};
class Grid
{
private:
	int _w, _h,_c;
	int counter;//class grid tapi g simpen array 2d?pindah nde global..wkwkkwk.. soale pas ngeprint e bingung pisan..
	int _grid[10][10];
	
	int _startY,_startX,_direction;
	Sprite s_pembelok[4],s_batu,s_goal,s_start,s_coin;
public:
	Grid()
	{
		_h = 0;
		_w = 0;
		_c =0;
		counter =0;
		

	}
	int getW()
	{
		return _w;
	}
	int getH()
	{
		return _h;
	}
	int getGrid(int _baris,int _kolom)
	{
		return _grid[_baris][_kolom];
	}
	void setGrid(FILE *&pf)
	{
		fscanf_s(pf,"%d %d %d",&_h,&_w,&_c);
		for (int i = 0; i < _h; i++)
		{
			for (int j = 0; j < _w; j++)
			{
				fscanf_s(pf, "%d", &_grid[i][j]);
				if(_grid[i][j] == 2) {_startX=i-1 ; _startY=j;_direction=0;}
				else if(_grid[i][j] == 3) {_startX=i ; _startY=j+1;_direction=1;}
				else if(_grid[i][j] == 4) {_startX=i+1 ; _startY=j;_direction=2;}
				else if(_grid[i][j] == 5) {_startX=i ; _startY=j-1;_direction=3;}
			}
		}
	}
	void setTextures(const Texture &t_pembelok, const Texture &t_batu, const Texture &t_goal, const Texture &t_start, const Texture &t_coin)
	{
		s_batu.setTexture(t_batu);
		//cara buat ukuran gambar 32x32
		s_batu.setScale(tileWidth/227,tileHeight/222);
		//sprite laine juga sama
		s_goal.setTexture(t_goal);

		s_goal.setScale(tileWidth/102,tileHeight/102);
		s_start.setTexture(t_start);
		s_start.setScale(tileWidth/124,tileHeight/124);
		s_coin.setTexture(t_coin);
		s_coin.setScale(tileWidth/102,tileHeight/102);
		s_pembelok[0].setTexture(t_pembelok);
		s_pembelok[0].setScale(tileWidth/124,tileHeight/124);

		//for(int i=0;i<4;i++)
		//{
		//	s_pembelok[i].setTexture(t_pembelok);
		//	s_pembelok[i].setScale(tileWidth/124,tileHeight/124);//nanti set en texture rect sesuai mb gambar xg mbo dapet no
		//	s_pembelok[i].setOrigin(62,62);
		//	FloatRect temp = s_pembelok[i].getGlobalBounds();
		//	if(i==1)
		//	{
		//		cout<<"im here : "<<temp.left<<" "<<temp.top<<endl;
		//	}
		//	s_pembelok[i].setRotation(90*i);
		//	//s_pembelok[i].setOrigin(0,0);
		//}
	}

	int getStartY()
	{
		return _startY;
	}
	int getStartDirection()
	{
		return _direction;
	}
	void displayGrid()
	{
		for (int i = 0; i < _h; i++)
		{
			for (int j = 0; j < _w; j++)
				cout << _grid[i][j] << " ";
			cout << endl;
		}
	}

	bool isValid(int b, int k)
	{
		if (b < 0 || k < 0 || b >= _h || k >= _w || _grid[b][k] == -1)
			return false;
		return true;
	}
	void swapTile(int row1, int col1, int row2,int col2)
	{
		int temp = _grid[row1][col1];
		_grid[row1][col1]=_grid[row2][col2];
		_grid[row2][col2]=temp;
	}
	bool doTraceLight()
	{
		return traceLight(_startX,_startY,_direction,0);
		//tak kasih hint
		//setiap kali pindah kotak disimpen koord e
		//terus di return ke game
		//setiap 0,5 detik posisi robot di set koord e
		// contoh misal e posisi[5]; y brarti setiap 0,5 detik nanti bakal pindah dari posisi[0], posisi[1], posisi[2] dst return ke game mksde?
		//berarti aku pny 1 array kan? xg menyimpan robot ini lewat mana ae, btw ini km tak ajari vector ae supaya km lebih gmpg bikin apa ae
		//tak return ke game supaya game tau robot harus lwat mana ae h
		}
	int traceLight(int b,int k, int lightDirection, int _stepToGoal)
	{
		//inti e gini setiap kali aku nerusno sinar ke kotak laine step ku bertambah
		//kan kapan hari km ws simpen to jumlah kotak kosong xg dilewatin mb sinar e? uda? uda itu pembelok km itung sebagi step ga? nda
		if (!isValid(b, k))
			return 0;
		if(_grid[b][k]==9) {cout<<_stepToGoal<<endl;return _stepToGoal;}
		if (_grid[b][k] == 0)
		{
			_grid[b][k] = 1;
			 int te=0;
			 
			if (lightDirection == 0) te = traceLight(b - 1, k, 0,_stepToGoal+1);//Meneruskan sinar ke atas
			if (lightDirection == 1) te = traceLight(b, k + 1, 1,_stepToGoal+1);//Meneruskan sinar ke kanan
			if (lightDirection == 2) te = traceLight(b + 1, k, 2,_stepToGoal+1);//Meneruskan sinar ke bawah
			if (lightDirection == 3) te = traceLight(b, k-1, 3,_stepToGoal+1);//Meneruskan sinar ke kiri
			cout<<_stepToGoal<<te<<endl;
			if (te> 0)return te;
		}
		else if (_grid[b][k] == -2 ) 
		{
			int temp = traceLight(b - 1, k, 0,_stepToGoal);//Membelokkan sinar ke atas
			if(temp>0) return temp;
		}
		else if (_grid[b][k] == -3 ) 
		{
			int temp =traceLight(b, k + 1, 1,_stepToGoal);//Membelokkan sinar ke kanan
			if(temp>0) return temp;
		}
		else if (_grid[b][k] == -4 ) 
		{
			int temp = traceLight(b + 1, k, 2,_stepToGoal);//Membelokkan sinar ke bawah
			if(temp>0) return temp;
		} 
		else if (_grid[b][k] == -5) 
		{
			int temp =traceLight(b, k - 1, 3,_stepToGoal);//Membelokkan sinar ke kiri
			if(temp>0) return temp;
		}
		return 0;
	}
	void draw( RenderWindow &window) 
	{
		for(int i=0;i<_h;i++)
		{
			
			for(int j=0;j<_w;j++)
			{

				if(_grid[i][j]==8)//kode e batu
				{
					s_batu.setPosition(offset+j*tileWidth ,offset+i*tileHeight);
					window.draw(s_batu);
				}
				else if(_grid[i][j]==9)//kode goal
				{
					s_goal.setPosition(offset+j*tileWidth ,offset+i*tileHeight);
					window.draw(s_goal);
				}
				else if(_grid[i][j]==-2)//kode pembelok atas
				{
					s_pembelok[0].setOrigin(0,0);
					s_pembelok[0].setPosition(offset+offset2+j*tileWidth ,offset+offset2+i*tileHeight);
					s_pembelok[0].setOrigin(62,62);
					s_pembelok[0].setRotation(270);
					window.draw(s_pembelok[0]);
					s_pembelok[0].setOrigin(0,0);
				}
				else if(_grid[i][j]==-3)//kode pembelok kanan
				{
					s_pembelok[0].setOrigin(0,0);
					s_pembelok[0].setPosition(offset+offset2+j*tileWidth ,offset+offset2+i*tileHeight);
					s_pembelok[0].setOrigin(62,62);
					s_pembelok[0].setRotation(0);
					window.draw(s_pembelok[0]);
					s_pembelok[0].setOrigin(0,0);
				}
				else if(_grid[i][j]==-4)//kode pembelok bawah
				{
					s_pembelok[0].setOrigin(0,0);
					s_pembelok[0].setPosition(offset+offset2+j*tileWidth ,offset+offset2+i*tileHeight);
					s_pembelok[0].setOrigin(62,62);
					s_pembelok[0].setRotation(90);
					window.draw(s_pembelok[0]);
					s_pembelok[0].setOrigin(0,0);
				}
				else if(_grid[i][j]==-5)//kode pembelok kiri
				{
					s_pembelok[0].setOrigin(0,0);
					s_pembelok[0].setPosition(offset+offset2+j*tileWidth ,offset+offset2+i*tileHeight);
					s_pembelok[0].setOrigin(62,62);
					s_pembelok[0].setRotation(180);
					window.draw(s_pembelok[0]);
					s_pembelok[0].setOrigin(0,0);
				}

				//---------------------------------------------------------------------------------------------------------
				else if(_grid[i][j]==2)//kode start atas
				{
					s_start.setOrigin(0,0);
					s_start.setPosition(offset+offset2+j*tileWidth ,offset+offset2+i*tileHeight);
					s_start.setOrigin(62,62);
					s_start.setRotation(270);
					window.draw(s_start);
					s_start.setOrigin(0,0);
				}
				else if(_grid[i][j]==3)//kode pembelok kanan
				{
					s_start.setOrigin(0,0);
					s_start.setPosition(offset+offset2+j*tileWidth ,offset+offset2+i*tileHeight);
					s_start.setOrigin(62,62);
					s_start.setRotation(0);
					window.draw(s_start);
					s_pembelok[0].setOrigin(0,0);
				}
				else if(_grid[i][j]==4)//kode pembelok bawah
				{
					s_start.setOrigin(0,0);
					s_start.setPosition(offset+offset2+j*tileWidth ,offset+offset2+i*tileHeight);
					s_start.setOrigin(62,62);
					s_start.setRotation(90);
					window.draw(s_start);
					s_start.setOrigin(0,0);
				}
				else if(_grid[i][j]==5)//kode pembelok kiri
				{
					s_start.setOrigin(0,0);
					s_start.setPosition(offset+offset2+j*tileWidth ,offset+offset2+i*tileHeight);
					s_start.setOrigin(62,62);
					s_start.setRotation(180);
					window.draw(s_start);
					s_start.setOrigin(0,0);
				}
				else if(_grid[i][j]==0)
				{
					s_coin.setPosition(offset+j*tileWidth,offset+i*tileHeight );
					window.draw(s_coin);
				
				}
				
			}
		}
	}
};
class Game
{
private:
	Grid _soal[10];
	int _currentSoal;
	
	RenderWindow window;
	Texture t_pembelok, t_batu, t_goal,t_start,t_coin;	
	FILE *pf;
	
public:
	Game()
	{

		loadGame();//ini supaya load texture cm 1x tapi di pakai berkali kali
	
	}
	void loadGame()
	{
		window.create(VideoMode(800,600),"Light Robot_IRGL");
		fopen_s(&pf,"source.txt","r");
		t_pembelok.loadFromFile("pembelok.png");
		t_goal.loadFromFile("finish.png");
		t_batu.loadFromFile("batu.png");
		t_start.loadFromFile("start.png");
		t_coin.loadFromFile("coin.png");
		//_soal[0].displayGrid();
		for(int i=0;i<2;i++)
		{
			_soal[i].setGrid(pf);
			_soal[i].setTextures(t_pembelok,t_batu,t_goal,t_start,t_coin);
		}
		_currentSoal=0;
		//load textures 
		
		
		//hmm kok aneh
	}
	void test()
	{
		_soal[0].doTraceLight();
	}
	void play()
	{
		
		Index selectedIndex[2];
		selectedIndex[0].setBK(-1,-1);
		selectedIndex[1].setBK(-1,-1);
		bool mouseIsBeingPressed=false;
		Vector2f MousePos;
		Index selectedGrid[2];
		int gridPickCounter=0;
		bool result=false;
		while (window.isOpen())
		{
			sf::Event event;
			while (window.pollEvent(event))
			{
				if (event.type == sf::Event::Closed)
					window.close();
				if(Mouse::isButtonPressed(Mouse::Left))
				{
					if(!mouseIsBeingPressed)
					{
						//get Mouse inputs
						MousePos=Vector2f(Mouse::getPosition(window));
						selectedGrid[gridPickCounter++]=Index((MousePos.y-offset)/tileHeight,(MousePos.x-offset)/tileHeight);
						//cout<<"Baris:"<<selectedGrid[gridPickCounter - 1]._baris<<endl;
						//cout<<"Kolom:"<<selectedGrid[gridPickCounter - 1]._kolom<<endl;
						//cout<<_soal[_currentSoal].getGrid(selectedGrid[gridPickCounter-1]._baris,selectedGrid[gridPickCounter-1]._kolom);
							
						if(_soal[_currentSoal].getGrid(selectedGrid[gridPickCounter-1]._baris,selectedGrid[gridPickCounter-1]._kolom)==8 ||_soal[_currentSoal].getGrid(selectedGrid[gridPickCounter-1]._baris,selectedGrid[gridPickCounter-1]._kolom)==9 ||_soal[_currentSoal].getGrid(selectedGrid[gridPickCounter-1]._baris,selectedGrid[gridPickCounter-1]._kolom)==2 ||_soal[_currentSoal].getGrid(selectedGrid[gridPickCounter-1]._baris,selectedGrid[gridPickCounter-1]._kolom)==3||_soal[_currentSoal].getGrid(selectedGrid[gridPickCounter-1]._baris,selectedGrid[gridPickCounter-1]._kolom)==4||_soal[_currentSoal].getGrid(selectedGrid[gridPickCounter-1]._baris,selectedGrid[gridPickCounter-1]._kolom)==5 )
						{
							cout<<"STUCK"<<endl;
							//_soal[_currentSoal].swapTile(selectedGrid[gridPickCounter-1]._baris,selectedGrid[gridPickCounter-1]._kolom,selectedGrid[gridPickCounter-1]._baris,selectedGrid[gridPickCounter-1]._kolom);
							gridPickCounter = 0;
						}
					}
					mouseIsBeingPressed=true;
				}
				if(!Mouse::isButtonPressed(Mouse::Left))
					mouseIsBeingPressed=false;
				if(Keyboard::isKeyPressed(Keyboard::F1))// submit
				{
					result=_soal[_currentSoal].doTraceLight();//result ngesimpen hasl dari trace light klo result true berarti robot e bisa sampe ke goal klo false g bisa
					if(result == true)
					{
						_currentSoal ++;
					}
				}
			}
		
				
			

			 if(gridPickCounter>=2)
			{
				//buat tuker isi grid
				if(selectedGrid[gridPickCounter-1]._baris == selectedGrid[gridPickCounter-2]._baris && selectedGrid[gridPickCounter-1]._kolom == selectedGrid[gridPickCounter-2]._kolom)
				{
					gridPickCounter = 1;
				}
				
				else {
				gridPickCounter=0;
				_soal[_currentSoal].swapTile(selectedGrid[0]._baris,selectedGrid[0]._kolom,selectedGrid[1]._baris,selectedGrid[1]._kolom);
				}
				
			}
	
			window.clear(Color::Black);
			_soal[_currentSoal].draw(window);
			window.display();
		}

	}
	~Game()
	{
		_fcloseall();
	}
};
int main()
{
	Game myGame;
	myGame.play();
	return 0;
	//sf::CircleShape shape(100.f);
	//shape.setFillColor(sf::Color::Green);
	//RectangleShape rect;
	//rect.setFillColor(Color::Black);rect.setOutlineColor(Color::Red);rect.setPosition(20,20);rect.setSize(Vector2f(20,20));


	////bool picked=true;
	//while (window.isOpen())
	//{


	//	Game first;
	//	//	system("CLS");
	//	//cout<<"maps";
	//	/*for(int i=0;i<b;i++)
	//	{
	//	for(int j=0;j<k;j++)
	//	{
	//	//cout<<grid[i][j]<<" ";
	//	}
	//	cout<<endl;
	//	}
	//	*/
	//	//cout<<endl;
	//	window.clear(Color::White);
	//	//cout<<b <<" "<<k<<endl;
	//	for(int i=0;i<5;i++)
	//	{
	//		for(int j=0;j<4;j++)
	//		{
	//			rect.setPosition(j*20,i*20);
	//			if(_grid[i][j]==1)
	//			{
	//				rect.setFillColor(Color::Red);
	//			}
	//			else if(_grid[i][j] == 8) //batu gede
	//			{rect.setFillColor(Color::Blue);}
	//			else if(_grid[i][j] >1 &&_grid[i][j] <6) //start
	//			{rect.setFillColor(Color::Cyan);}
	//			else if(_grid[i][j] ==9) //end
	//			{rect.setFillColor(Color::Green);}
	//			else if(_grid[i][j] >-6 && _grid[i][j]<-1) //belok
	//			{rect.setFillColor(Color::Magenta);}
	//			else
	//			{
	//				rect.setFillColor(Color::Black);
	//			}
	//			//displayPosition(rect.getPosition());
	//			window.draw(rect);
	//		}
	//	}
	//	window.display();
	//}

	return 0;
}